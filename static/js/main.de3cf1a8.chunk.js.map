{"version":3,"sources":["gltf/tvModelNoTexture.gltf","logo.svg","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","props","state","loading","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","renderer","WebGLRenderer","antialias","setSize","controls","OrbitControls","domElement","document","body","appendChild","LoadingManager","onProgress","hemiLight","HemisphereLight","color","setHSL","groundColor","add","model","hemiLightHelper","HemisphereLightHelper","console","log","tvGLTF","GLTFLoader","load","gltf","setState","xhr","lengthComputable","percent","loaded","total","error","addEventListener","aspect","updateProjectionMatrix","animate","requestAnimationFrame","rotation","y","update","render","loadingPage","this","className","Component","App","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,+C,4ECA3CD,EAAOC,QAAU,IAA0B,kC,yLCkH5BC,EAzGf,YACI,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,SAAS,GAHC,EADtB,iFAQwB,IAAD,OACXC,EAAQ,IAAIC,KACZC,EAAS,IAAIC,IAAmB,GAAIC,OAAOC,WAAWD,OAAOE,YAAa,GAAK,KACnFJ,EAAOK,SAASC,IAAK,EAAG,EAAG,MAC3B,IAAIC,EAAW,IAAIC,KAAc,CAAEC,WAAW,IAC9CF,EAASG,QAASR,OAAOC,WAAYD,OAAOE,aAC5C,IAAIO,EAAW,IAAIC,IAAeZ,EAAQO,EAASM,YACnDC,SAASC,KAAKC,YAAaT,EAASM,aAEtB,IAAII,KACVC,WAAa,aAIrB,IAAIC,EAAY,IAAIC,IAAiB,SAAU,SAAU,IACzDD,EAAUE,MAAMC,OAAQ,EAAG,EAAG,GAC9BH,EAAUI,YAAYD,OAAQ,EAAG,EAAG,KACpCH,EAAUd,SAASC,IAAK,IAAM,IAAM,GACpCR,EAAM0B,IAAKL,GACX,IAIIM,EAJAC,EAAkB,IAAIC,IAAuBR,EAAW,IAC5DrB,EAAM0B,IAAKE,GAEXE,QAAQC,IAAIC,MAGC,IAAIC,KACVC,KAAKF,KAAQ,SAACG,GACjB,EAAKC,SAAS,CACVrC,SAAS,KAEb4B,EAAQQ,EAAKnC,OACPO,SAASC,IAAK,GAAI,IAAK,GAC7BR,EAAM0B,IAAIC,MAGd,SAACU,GACMA,EAAIC,kBACH,EAAKF,SAAS,CACVrC,SAAS,EACTwC,QAAUF,EAAIG,OAAOH,EAAII,MAAQ,MAErCX,QAAQC,IAAR,kBAAuBM,EAAIG,OAA3B,oBAA6CH,EAAII,MAAjD,aAA2DJ,EAAIG,OAAOH,EAAII,MAAQ,OAGlF,EAAKL,SAAS,CACVrC,SAAS,OAIrB,SAAC2C,GACGZ,QAAQC,IAAIW,MAGhBtC,OAAOuC,iBAAiB,UAAU,WAC9BzC,EAAO0C,OAASxC,OAAOC,WAAaD,OAAOE,YAC3CJ,EAAO2C,yBACPpC,EAASG,QAAQR,OAAOC,WAAYD,OAAOE,gBAC5C,IAEW,SAAVwC,IACAC,sBAAuBD,GAEpBnB,IAECA,EAAMqB,SAASC,GAAK,KAExBpC,EAASqC,SAETzC,EAAS0C,OAAQnD,EAAOE,GAG5B4C,KA/ER,+BAmFQ,IAAIM,EAcJ,OAVQA,EAFLC,KAAKvD,MAAMC,QACPsD,KAAKvD,MAAMyC,QACI,wBAAIe,UAAU,UAAd,mBAAwCD,KAAKvD,MAAMyC,SAGnD,wBAAIe,UAAU,UAAd,iBAIJ,KAId,6BACKF,OAnGjB,GAA0BG,aCIXC,MARf,WACE,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,QCIcG,QACW,cAA7BrD,OAAOsD,SAASC,UAEe,UAA7BvD,OAAOsD,SAASC,UAEhBvD,OAAOsD,SAASC,SAASC,MACvB,2DCZNC,IAASV,OAAO,kBAAC,EAAD,MAASnC,SAAS8C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.de3cf1a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tvModelNoTexture.06c1705f.gltf\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { Scene, PerspectiveCamera, WebGLRenderer, BoxGeometry, MeshBasicMaterial, Mesh, AmbientLight, HemisphereLight, HemisphereLightHelper, LoadingManager } from 'three';\r\n//import tvGLTF from '../gltf/tv2.gltf';\r\nimport tvGLTF from '../gltf/tvModelNoTexture.gltf';\r\n//import tvGLTF from '../gltf/tvModelChrome.gltf';\r\n//import adamHead from '../gltf/adamHead/adamHead.gltf';\r\n\r\nexport class Main extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            loading: true\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        var scene = new Scene();\r\n        var camera = new PerspectiveCamera( 50, window.innerWidth/window.innerHeight, 0.1, 10000);\r\n        camera.position.set( 0, 0, 2500 );\r\n        var renderer = new WebGLRenderer({ antialias: true });\r\n        renderer.setSize( window.innerWidth, window.innerHeight );\r\n        var controls = new OrbitControls( camera, renderer.domElement );\r\n        document.body.appendChild( renderer.domElement );\r\n        \r\n        var manager = new LoadingManager();\r\n        manager.onProgress = () => {\r\n\r\n        }\r\n        \r\n        var hemiLight = new HemisphereLight( 0xffffff, 0xffffff, 0.8 );\r\n        hemiLight.color.setHSL( 1, 1, 1 );\r\n        hemiLight.groundColor.setHSL( 1, 1, 0.75 );\r\n        hemiLight.position.set( 1000, 2000, 0 );\r\n        scene.add( hemiLight );\r\n        var hemiLightHelper = new HemisphereLightHelper( hemiLight, 10 );\r\n        scene.add( hemiLightHelper );\r\n\r\n        console.log(tvGLTF);\r\n        let model;\r\n\r\n        let loader = new GLTFLoader();\r\n        loader.load(tvGLTF, (gltf) => {\r\n            this.setState({\r\n                loading: false\r\n            });\r\n            model = gltf.scene;\r\n            model.position.set( 0, -400, 0);\r\n            scene.add(model);\r\n            \r\n        },\r\n        (xhr) => {\r\n            if(xhr.lengthComputable){\r\n                this.setState({\r\n                    loading: true,\r\n                    percent: (xhr.loaded/xhr.total * 100)\r\n                });\r\n                console.log(`loaded: ${xhr.loaded}, total: ${xhr.total}, ${xhr.loaded/xhr.total * 100}`);\r\n            }\r\n            else{\r\n                this.setState({\r\n                    loading: true\r\n                });\r\n            }\r\n        },\r\n        (error) => {\r\n            console.log(error);\r\n        });\r\n\r\n        window.addEventListener('resize', () => {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }, false);\r\n\r\n        var animate = function () {\r\n            requestAnimationFrame( animate );\r\n\r\n            if(model){\r\n                //model.rotation.x += 0.01;\r\n                model.rotation.y += 0.01;\r\n            }\r\n            controls.update();\r\n\r\n            renderer.render( scene, camera );\r\n        };\r\n\r\n        animate();\r\n    }\r\n\r\n    render() {\r\n        let loadingPage;\r\n\r\n        if(this.state.loading){\r\n            if(this.state.percent){\r\n                loadingPage = <h1 className=\"center\">L O A D I N G - {this.state.percent}</h1>;\r\n            }\r\n            else{\r\n                loadingPage = <h1 className=\"center\">L O A D I N G</h1>;\r\n            }\r\n        }\r\n        else{\r\n            loadingPage = null;\r\n            //loadingPage = <h1 className=\"center\">L O A D I N G</h1>;\r\n        }\r\n        return (\r\n            <div>\r\n                {loadingPage}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}